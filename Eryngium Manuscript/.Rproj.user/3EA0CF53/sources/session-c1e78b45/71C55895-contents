library(tidyverse)
library(sf)
library(terra)
library(tidyterra)
library(cowplot)
library(grid)

rast_list <- list.files(path = "data/spatial/", pattern = "*logged_EE",full.names = T)
rast_names <- list.files(path = "data/spatial/", pattern = "*logged_EE",full.names = F)  %>% 
  str_split_i(pattern = "_logged",1)   %>% 
  str_replace("_","") 
all_r <- rast(rast_list)
empty_r <- all_r[[4]]
empty_r[] <- NA
set.names(all_r,rast_names)
conts <- st_read("data/spatial/continents_EE.shp")
wldfire <- rast(rast_list[5])

bbox <- st_bbox(conts)
xlim_conts <- c(-13400001,15079198)
ylim_conts <- c(bbox[["ymin"]],bbox[["ymax"]])
tar_crs <- st_crs(conts)


#read in points layer: dataMap_subset

load("data/spatial/intermediateWri2.rdata")
dataMap_subset <- dataMap_subset  %>% 
  mutate(source = "ISL") #add source column to identify where points are from
### load in and harmonize private amazon data - never save any data file from below this point to preserve data privacy###
amz_windthrow <- read.csv("data/private/WT_Regionalization_RNJ_ERL23.csv")
amz_wt_temp <- amz_windthrow  %>% 
  mutate(source = "Non-ISL", wriGroup = "storms")   %>% 
  select(lon, lat, source, wriGroup)  
amz_pts <- st_as_sf(amz_wt_temp,coords = c("lon","lat"),crs = "epsg:4326")  %>% st_transform(crs = crs(dataMap_subset))
##loading Shapiro pts - use congoDataMap_subset
load("data/spatial/congoData.rdata")
congoDataMap_subset <- congoDataMap_subset%>%
  mutate(source="Shapiro23")

##########
crs_info <- crs(dataMap_subset)
print(crs_info) #double checking it is an equal earth projection

category_colors <- c("storms" = "#c1a23b",  "drought" = "#b36122",  "wildfire" = "#960000",  "insects and pathogens" = "#d03c50",  "permafrost thaw" =  "#f296a3", "logging" = "#5a0075",  "fuelwood harvest" = "#474ca8", "non-timber commodity production" = "#006ddb",  "subsistence agriculture" = "#328e78",  "urban expansion" =  "#6ef3ff", "other"="#4c494c")

color_df <- data.frame(category_colors)  %>% 
      rownames_to_column()   %>% 
      select(wriGroup = rowname, category_colors)
dataMap_subset <- dataMap_subset  %>% 
  left_join(color_df)  %>% 
  mutate(wriGroup = factor(wriGroup, levels = color_df$wriGroup))
x <- 1:11
y <- 1:11
plot(x, y , pch = 19, col = category_colors, cex = 8)
#### build plots ####

grb0 <- ggplot()+
  geom_sf(data = conts, fill="#c8c8c8", color = "#efefef", lwd=.75) + #fill is continent color, color is country boundaries, lwd is line thickness of country boundaries
  coord_sf(xlim = xlim_conts, ylim= ylim_conts, datum = tar_crs) +
  #scale_fill_manual(na.value = "blue",
  #                guides(fill = guide_legend(override.aes = list(alpha = 0)))) +
  #    theme_classic() #+
  theme_void() + 
  theme(legend.position = c(x = .5, y = .1),
        legend.text = element_text(color = "transparent"),
        legend.title = element_text(color = "white"),
        legend.key = element_rect(fill = "white",colour = "white"),
        plot.background = element_rect(colour = "black",fill = "#efefef", linewidth = .5)) #change background color here (fill)


grb1 <- ggplot() +
  geom_spatraster(data = all_r, aes(fill = Forestry),show.legend = T) +
  coord_sf(xlim = xlim_conts, ylim= ylim_conts, datum = tar_crs) +
  scale_fill_continuous(low = "white",high = category_colors["logging"], na.value = "transparent",
                        guides(fill = guide_legend(override.aes = list(alpha = 0)))) +
  #    theme_classic() #+
  theme_void() + 
  theme(legend.position = c(x = .5, y = .1),
        legend.text = element_text(color = "white"),
        legend.title = element_text(color = "transparent"),
        legend.key = element_rect(fill = "white",colour = "white"),
        plot.background = element_rect(colour = "black",fill = NA, linewidth = .5))

grb2 <- ggplot() +
  geom_spatraster(data = all_r, aes(fill = Wildfire),show.legend = T) +
  coord_sf(xlim = xlim_conts, ylim = ylim_conts, datum = tar_crs) +
  scale_fill_continuous(low = "white",high = category_colors["wildfire"], na.value = "transparent",
                        guides(fill = guide_legend(override.aes = list(alpha = 0)))) +
  #    theme_classic() #+
  theme_void() + 
  theme(legend.position = c(x = .5, y = .1),
        legend.text = element_text(color = "white"),
        legend.title = element_text(color = "transparent"),
        legend.key = element_rect(fill = "white",colour = "white"))
grb3 <- ggplot() +
  geom_spatraster(data = all_r, aes(fill = Shiftingagriculture),show.legend = T) +
  coord_sf(xlim = xlim_conts, ylim= ylim_conts, datum = tar_crs) +
  scale_fill_continuous(low = "white",high = category_colors["subsistence agriculture"], na.value = "transparent",
                        guides(fill = guide_legend(override.aes = list(alpha = 0)))) +
  #    theme_classic() #+
  theme_void() + 
  theme(legend.position = c(x = .5, y = .1),
        legend.text = element_text(color = "white"),
        legend.title = element_text(color = "transparent"),
        legend.key = element_rect(fill = "white",colour = "white"))
grb4 <- ggplot() +
  geom_spatraster(data = all_r, aes(fill = `Commodity-drivendeforestation`),show.legend = T) +
  coord_sf(xlim = xlim_conts, ylim= ylim_conts, datum = tar_crs) +
  scale_fill_continuous(low = "white",high = category_colors["non-timber commodity production"], na.value = "transparent",
                        guides(fill = guide_legend(override.aes = list(alpha = 0)))) +
  #    theme_classic() #+
  theme_void() + 
  theme(legend.position = c(x = .5, y = .1),
        legend.text = element_text(color = "white"),
        legend.title = element_text(color = "transparent"),
        legend.key = element_rect(fill = "white",colour = "white"))
grb5 <- ggplot() +
  geom_spatraster(data = all_r, aes(fill = Urbanization),show.legend = T) +
  # geom_sf(data = dataMap_subset, aes(fill = wriGroup), size = 2.5, shape = 21, stroke= 1.1) +
  coord_sf(xlim = xlim_conts, ylim= ylim_conts, datum = tar_crs) +
  scale_fill_continuous(low = "white",high = category_colors["urban expansion"], na.value = "transparent",
                        guides(fill = guide_legend(override.aes = list(alpha = 0)))) +
  #    theme_classic() #+
  theme_void() + 
  theme(legend.position = c(x = .5, y = .1),
        legend.text = element_text(color = "white"),
        legend.title = element_text(color = "transparent"),
        legend.key = element_rect(fill = "white",colour = "white"))

# grb_colbar <- ggplot() +
#   geom_spatraster(data = empty_r,show.legend = T) + 
#   coord_sf(xlim = xlim_conts, ylim= ylim_conts, datum = tar_crs) +
#   scale_fill_continuous(low = "white",
#                         high = "black", 
#                         na.value = "transparent",
#                         limits = c(-21.3,-3),
#                         breaks = c(-21.3,-4),
#                         labels = c("0",".20"),
#                         name = "MtCO2e yr-1 (2001-2022)",
#                         guide = guide_colourbar( direction = "horizontal",
#                         title.position = "top")) +
#   #    theme_classic() #+
#   theme_void() + 
#   theme(legend.position = c(x = .5, y = .1))
## Plotting ISL point layer, first sf is semi-transparent fill, second is outline
#jittered <- st_jitter(dataMap_subset)

grb6 <- ggplot() +
  geom_sf(data = amz_pts,aes(color = wriGroup), size = .15, shape = 19) + ###adding amazon points
  geom_sf(data = congoDataMap_subset, aes(color = wriGroup), size = .15, shape = 19) + ###adding congo points
  geom_sf(data = dataMap_subset, aes(color = wriGroup, fill = wriGroup), size = 2, shape = 21, stroke = 1, alpha = .4) +
  geom_sf(data = dataMap_subset, aes(color = wriGroup), size = 2.4, shape = 21, stroke = .7) +
  coord_sf(xlim = xlim_conts, ylim = ylim_conts, datum = tar_crs) +
  scale_fill_manual(values = category_colors) +
  scale_color_manual(values = category_colors) +
  guides(fill = guide_legend(override.aes = list(alpha = 0)), color = "none") +
  theme_void() + 
  theme(legend.position = c(x = 0.5, y = 0.1),
        legend.text = element_text(color = "transparent"),
        legend.title = element_text(color = "transparent"),
        legend.key = element_rect(fill = "transparent", colour = "transparent"))


txt_labels_temp <- names(category_colors)  %>% str_to_title() %>% str_replace(pattern = "And", replacement = "&")

txt_labs <- if_else(nchar(txt_labels_temp) >= 15,str_replace(txt_labels_temp,pattern = " ", replacement = "\n"),txt_labels_temp)

ymn_base <- c(1, 1 + (2 * (1:length(txt_labs[-1]))))
bx_size <- 1000000 * .65
ymins <- rev(-8079198 + (bx_size * ymn_base))
ymaxs <- ymins + bx_size
xmin_bx <- -13800000
xmax_bx <- xmin_bx + bx_size



nchr <- nchar(txt_labs)
txt_mod <- case_when(nchr < 10 ~ 2.1,
          nchr == 10 ~ 2.7,
          nchr <= 23 & nchr > 10 ~ 2.5,
          nchr > 23 ~ 3.3)
x_txt <- xmax_bx + (bx_size * .85)  * txt_mod
y_txt <- ymins + (bx_size / 2)

num_cats <- length(category_colors)
fill_leg <- ggplot() +
  coord_sf(xlim = xlim_conts, ylim= ylim_conts, datum = tar_crs) +
  theme_void() + 
  annotate("text",label = txt_labs,x = x_txt, y = y_txt, size = 2.9) +
  annotate(geom = "rect",xmin = xmin_bx, xmax = xmax_bx,ymin = ymins, ymax = ymaxs, fill = category_colors)

####plotting ####
png(filename = "doc/manuscript/display/global_map_ls_loss.png", height = 6, width  = 10, units = "in", res = 300)

grid.newpage()
grid.draw(as_grob(grb0))
grid.draw(as_grob(grb1))
grid.draw(as_grob(grb2))
grid.draw(as_grob(grb3))
grid.draw(as_grob(grb4))
grid.draw(as_grob(grb5))
grid.draw(as_grob(grb6))
#grid.draw(as_grob(grb_colbar))
grid.draw(as_grob(fill_leg))
dev.off()




