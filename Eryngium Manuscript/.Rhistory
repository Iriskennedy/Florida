region == "Boreal North America" ~ "Bo N. America",
region == "Boreal Eurasia" ~ "Bo Eurasia",
TRUE ~ region  # Default case for other regions
))
driversCombined <- driversCombined %>%
mutate(abbreviated_region = gsub(" ", "_", abbreviated_region),
abbreviated_driver = gsub(" ", "_", driver))
#add column to the combined driver data frame in order to map it to links data frame
driversCombined$link_connections <- paste(driversCombined$abbreviated_region, driversCombined$abbreviated_driver, sep = "_to_")
#joining by link_connections to add trusted_value column to links data frame to allow it to be colored
links <- links %>%
left_join(driversCombined %>% select(link_connections, trusted_value), by = "link_connections")
links <- links%>%
mutate(trusted_value=if_else(is.na(trusted_value), 1, trusted_value),
colorFinal=if_else(trusted_value==0, lightColor,color))  #if true this otherwise that
# SETUP
rm(list=ls())#clears global environment
#setwd("~/Dropbox (Smithsonian)/GitHub/ForestGEO/global_biomass_loss_review/R_Scripts/sankey") #for KAT
setwd("C:\\Users\\irisa\\Documents\\GitHub\\global_biomass_loss_review\\R_Scripts\\sankey")# for IK
getwd()
# Install and load required packages
# install.packages(c("networkD3", "htmlwidgets"))  need to install this package if not already installed
library(networkD3) # Documentation: https://christophergandrud.github.io/networkD3/
library(htmlwidgets)
library(tidyverse)
library(dplyr)
library(tidyr)
# Set path to repo
path_to_repo <- dirname(dirname(getwd())) # this will allow anyone to run the script
detach("package:MASS", unload = TRUE)
# Install and load required packages
# install.packages(c("networkD3", "htmlwidgets"))  need to install this package if not already installed
library(networkD3) # Documentation: https://christophergandrud.github.io/networkD3/
library(htmlwidgets)
library(tidyverse)
library(dplyr)
library(tidyr)
# Set path to repo
path_to_repo <- dirname(dirname(getwd())) # this will allow anyone to run the script
# SPECIFY OPTIONS
area_or_biomass = 2 # 1-area; 2- biomass. (NOTE: we were originally producing an area-based sankey for WRI data only for inclusion in the SI. It's not really needed and would require some complicated formatting, so KAT decided to drop it.)
include_intermediate = TRUE # see note above.
min_threshold_area = 0.01 #Mha /yr. 0.01 threshold is 10,000 ha
min_threshold_biomass = 2 # want to change to ~10 (Tg /yr) once we have real data (but for now low value is needed as placeholder)
#specify ribbon widths for categories
rw_minimal = 0
rw_low = 10^.5*2 #1-10 TgC yr-1
rw_med = 10^1.5*2 #10- 100 TgC yr-1
rw_high = 200 # >100 TgC yr-1
insects_frac_to_commerce = 0.3
if (area_or_biomass == 1) { #area
# Read in data
large_scale_drivers <-read.csv(paste0(path_to_repo,"/data/spatial/forest_area_loss_drivers.csv"))
# Assign driver variable
large_scale_drivers$driver <- large_scale_drivers$tcl_driver__class
# Assign value that will be used in analysis
large_scale_drivers$value <- large_scale_drivers$forest_loss_ha_yr_18_22/1000000 # diving by 1000000 converts ha to Mha
# Delete values below threshold
large_scale_drivers <- large_scale_drivers[large_scale_drivers$value >=min_threshold_area, ]
} else { #biomass
# Read in data
large_scale_drivers <-read.csv(paste0(path_to_repo,"/data/spatial/forest_biomass_loss_drivers.csv"))
# Assign driver variable
large_scale_drivers$driver <- large_scale_drivers$Driver.of.tree.cover.loss
# Assign value that will be used in analysis
large_scale_drivers$value <- large_scale_drivers$forest_loss_Mg_yr_18_22/1000000 # diving by 1000000 converts Mg to Tg
# Delete values below threshold
large_scale_drivers <- large_scale_drivers[large_scale_drivers$value >=min_threshold_biomass, ]
}
# Change some terminology relative to source spreadsheet
# Delete "Unknown" category
large_scale_drivers <- large_scale_drivers[large_scale_drivers$driver != "Unknown", ]
# Rename "urbanization" as "urban expansion"
large_scale_drivers$driver[which(large_scale_drivers$driver == "Urbanization")] <- "Urban expansion"
# Rename "shifting agriculture" as "subsistence agriculture"
large_scale_drivers$driver[which(large_scale_drivers$driver == "Shifting agriculture")] <- "Subsistence agriculture"
# Rename  "Commodity-driven deforestation" -> "non-timber commodity production"
large_scale_drivers$driver[which(large_scale_drivers$driver == "Commodity driven deforestation")] <- "Non-timber commodity production"
# Rename  "Forestry" -> "Clear-cut logging"
large_scale_drivers$driver[which(large_scale_drivers$driver == "Forestry")] <- "Clear-cut logging"
# DATA PREP - INTERMEDIATE SCALE DRIVERS
if (include_intermediate == TRUE) {
# Intermediate Scale - Read in data
intermediate_scale_drivers_by_region <-read.csv(paste0(path_to_repo,"/data/intermediate_scale_drivers_by_region.csv"))
# Intermediate Scale - Subset area or biomass (depending on which is used), remove those below threshold
if (area_or_biomass == 1) { #area
intermediate_scale <- intermediate_scale_drivers_by_region[intermediate_scale_drivers_by_region$variable == "Area_MHa_yr", ]
intermediate_scale <- intermediate_scale[complete.cases(intermediate_scale$value), ]
intermediate_scale <- intermediate_scale[intermediate_scale$value >= min_threshold_area,  ]
} else { #biomass
intermediate_scale <- intermediate_scale_drivers_by_region[intermediate_scale_drivers_by_region$variable == "Biomass_Tg_yr", ]
intermediate_scale <- intermediate_scale[intermediate_scale$include == 1, ] # use only records flagged for inclusion
# create and save fields
# create field with values to be published in the table
intermediate_scale$value_table <- round(intermediate_scale$value*.47,0) # start with quantitative estimates, converted from units biomass to C
# for categorical records, fill in category name
intermediate_scale$value_table[intermediate_scale$trusted_value == 0 & intermediate_scale$category == 0] <- "-"
intermediate_scale$value_table[intermediate_scale$trusted_value == 0 & intermediate_scale$category == 1] <- "low"
intermediate_scale$value_table[intermediate_scale$trusted_value == 0 & intermediate_scale$category == 2] <- "medium"
intermediate_scale$value_table[intermediate_scale$trusted_value == 0 & intermediate_scale$category == 3] <- "high"
#combine value estimates with justification and references
IS_sankey_table <- data.frame(intermediate_scale$region, intermediate_scale$driver, intermediate_scale$value_table, intermediate_scale$estimate_justification, intermediate_scale$estimate_references)
# save this to display folder
write.csv(IS_sankey_table, file = paste0(path_to_repo,"/doc/manuscript/display/IS_sankey_table.csv"), row.names = FALSE)
# for categorical records, replace category code with default ribbon width
intermediate_scale$category[intermediate_scale$category == 1] <- rw_low
intermediate_scale$category[intermediate_scale$category == 2] <- rw_med
intermediate_scale$category[intermediate_scale$category == 3] <- rw_high
# for values with no quantitative value, fill in with category-based value
intermediate_scale$value[intermediate_scale$trusted_value == 0] <- intermediate_scale$category[intermediate_scale$trusted_value == 0]
# for records with no quantitative or categorical value, assign ribbon width zero
intermediate_scale$value[is.na(intermediate_scale$value)] <- 0
# remove  all records below the minimum threshold (including those with no values, above)
intermediate_scale <- intermediate_scale[intermediate_scale$value >=min_threshold_biomass, ]
#save values,
}
}
# Create combined matrix
if (include_intermediate == TRUE) {
P_source= c(large_scale_drivers$region,intermediate_scale$region)#double check heading is correct, had error before due to extra "i..." added on to row name
P_target = c(large_scale_drivers$driver,intermediate_scale$driver)
P_values= c(large_scale_drivers$value,intermediate_scale$value )
} else {
P_source= large_scale_drivers$region
P_target = large_scale_drivers$driver
P_values= large_scale_drivers$value
}
# Abbreviate region names
P_source <- gsub("Temperate & Subtropical North America", "Te/St N. America", P_source)
P_source <- gsub("Temperate & Subtropical S. Hemisphere", "Te/St S. Hemisphere", P_source)
P_source <- gsub("Temperate & Subtropical Asia", "Te/St Asia", P_source)
P_source <- gsub("Temperate & Subtropical Europe", "Te/St Europe+", P_source)
P_source <- gsub("Tropical Asia & Oceania", "Tr Asia & Oceania", P_source)
P_source <- gsub("Tropical W. Hemisphere", "Tr Americas", P_source)
P_source <- gsub("Tropical Africa", "Tr Africa", P_source)
P_source <- gsub("Boreal North America", "Bo N. America", P_source)
P_source <- gsub("Boreal Eurasia", "Bo Eurasia", P_source)
# Index & sum by driver
CommodityDrivenDeforestation_subset <- large_scale_drivers[large_scale_drivers$driver == "Non-timber commodity production", ]
CommodityDrivenDeforestation_global_sum <- sum(CommodityDrivenDeforestation_subset$value)
Forestry_subset <- large_scale_drivers[large_scale_drivers$driver == "Clear-cut logging", ]
Forestry_global_sum <- sum(Forestry_subset$value)
ShiftingAg_subset <- large_scale_drivers[large_scale_drivers$driver == "Subsistence agriculture", ]
ShiftingAg_global_sum <- sum(ShiftingAg_subset$value)
Urbanization_subset <- large_scale_drivers[large_scale_drivers$driver == "Urban expansion", ]
Urbanization_global_sum <- sum(Urbanization_subset$value)
Wildfire_subset <- large_scale_drivers[large_scale_drivers$driver == "Wildfire", ]
Wildfire_global_sum <- sum(Wildfire_subset$value)
if (include_intermediate == TRUE) {
Drought_subset <- intermediate_scale[intermediate_scale$driver == "Drought", ]
Drought_global_sum <- sum(Drought_subset$value)
Fuelwood_subset <- intermediate_scale[intermediate_scale$driver == "Fuelwood harvest", ]
Fuelwood_global_sum <- sum(Fuelwood_subset$value)
Insects_subset <- intermediate_scale[intermediate_scale$driver == "Insects & pathogens", ]
Insects_global_sum <- sum(Insects_subset$value)
SelectiveLogging_subset <- intermediate_scale[intermediate_scale$driver == "Selective logging", ]
SelectiveLogging_global_sum <- sum(SelectiveLogging_subset$value)
Storms_subset <- intermediate_scale[intermediate_scale$driver == "Storms", ]
Storms_global_sum <- sum(Storms_subset$value)
Permafrost_subset <- intermediate_scale[intermediate_scale$driver == "Permafrost thaw", ]
Permafrost_global_sum <- sum(Permafrost_subset$value)
}
# Create matrix for proximate drivers
if (include_intermediate == TRUE) {
proximate_to_distal_drivers <- data.frame(
D_source = c("Non-timber commodity production",
"Subsistence agriculture",
"Clear-cut logging",
"Urban expansion",
"Fuelwood harvest",
"Selective logging",
"Wildfire",
"Drought",
"Insects & pathogens","Insects & pathogens",
"Storms",
"Permafrost thaw"),
D_target = c("Commodity production",
"Local basic living needs",
"Commodity production",
"Local basic living needs",
"Local basic living needs",
"Commodity production",
"Semi-natural drivers",
"Semi-natural drivers",
"Semi-natural drivers", "Commodity production",
"Semi-natural drivers",
"Semi-natural drivers"),
D_values = c(CommodityDrivenDeforestation_global_sum,
ShiftingAg_global_sum,
Forestry_global_sum,
Urbanization_global_sum,
Fuelwood_global_sum,
SelectiveLogging_global_sum,
Wildfire_global_sum,
Drought_global_sum,
Insects_global_sum*(1-insects_frac_to_commerce), Insects_global_sum*(insects_frac_to_commerce),
Storms_global_sum,
Permafrost_global_sum)
)
} else {
proximate_to_distal_drivers <- data.frame(
D_source = c("Non-timber commodity production", "Subsistence agriculture", "Clear-cut logging", "Urban expansion",
"Wildfire"),
D_target = c("Commodity production", "Local basic living needs", "Commodity production",  "Local basic living needs",
"Semi-natural drivers"),
D_values = c(CommodityDrivenDeforestation_global_sum,
ShiftingAg_global_sum,
Forestry_global_sum,
Urbanization_global_sum,
Wildfire_global_sum)
)
}
# Combine proximate and distal driver matrices
sources = c(P_source,proximate_to_distal_drivers$D_source)
targets = c(P_target,proximate_to_distal_drivers$D_target)
values_area = c(P_values, proximate_to_distal_drivers$D_values)
if (area_or_biomass == 2) { #biomass
global_gross_forest_loss_Tg_yr <- sum(proximate_to_distal_drivers$D_values)
global_gross_forest_loss_commerce <- sum(proximate_to_distal_drivers$D_values[proximate_to_distal_drivers$D_target == "Commodity production"])
global_gross_forest_loss_sustenance <- sum(proximate_to_distal_drivers$D_values[proximate_to_distal_drivers$D_target == "Local basic living needs"])
global_gross_forest_loss_directHuman <- global_gross_forest_loss_commerce + global_gross_forest_loss_sustenance
global_gross_forest_loss_seminatural <- sum(proximate_to_distal_drivers$D_values[proximate_to_distal_drivers$D_target == "Semi-natural drivers"])
global_gross_WRI = CommodityDrivenDeforestation_global_sum + ShiftingAg_global_sum+ Urbanization_global_sum + Forestry_global_sum+ Wildfire_global_sum
percent_commerce=global_gross_forest_loss_commerce/global_gross_forest_loss_Tg_yr*100
percent_sustenance=global_gross_forest_loss_sustenance/global_gross_forest_loss_Tg_yr*100
percent_seminatural=global_gross_forest_loss_seminatural/global_gross_forest_loss_Tg_yr*100
percent_direct_anthropogenic=global_gross_forest_loss_directHuman/global_gross_forest_loss_Tg_yr*100
# save these and read into manuscript file
save(CommodityDrivenDeforestation_global_sum,
ShiftingAg_global_sum,
Forestry_global_sum,
Urbanization_global_sum,
Fuelwood_global_sum,
SelectiveLogging_global_sum,
Wildfire_global_sum,
Drought_global_sum,
Insects_global_sum,
Storms_global_sum,
Permafrost_global_sum,
global_gross_forest_loss_Tg_yr, global_gross_forest_loss_directHuman, global_gross_forest_loss_commerce, global_gross_forest_loss_sustenance,
global_gross_forest_loss_seminatural, global_gross_WRI,
percent_commerce, percent_sustenance, percent_seminatural, percent_direct_anthropogenic,
file = paste0(path_to_repo,"/doc/manuscript/SankeyBiomassLossStatistics.RData"))
}
# SET UP & CREATE SANKEY
# Create a data frame for nodes
nodes <- data.frame(name = c(
unique(c(sources, targets)))
)
links <- data.frame(
source = sources,
target = targets,
value = values_area
)
nodes$node_group <- gsub(" ", "_", nodes$name)#creating nodes_group because to map the colors we need to have underscores instead of spaces, adding as a second column allows us to keep the titles of the nodes with spaces (node$name)
# Convert source and target to numeric indices
links$source <- match(links$source, nodes$name) - 1
links$target <- match(links$target, nodes$name) - 1
links$link_group <- nodes$node_group[links$source +1]# this allows us to map the colors to the links if we want, you can comment out line 210:  LinkGroup = "link_group", to turn it off
links$link_connections <-paste(nodes$node_group[links$source + 1], nodes$node_group[links$target + 1], sep = "_to_")#making a column in links so we can easily see what each connection is
links$link_connections_abb <- paste0(rep(LETTERS, each = 26), letters)[1:nrow(links)]
##manipulate colors:
makeLinkColor <- function(source, target) {
if (source == 9 || target == 9) {
return("#006ddb")  # Commodity, stays same
} else if (source == 10 || target == 10) {
return("#328e78")  # Subsistence agriculture, was: #490092, DONE
} else if (source == 11 || target == 11) {
return("#5a0075")  # Clear-cut logging, was: #004949 DONE
} else if (source == 12 || target == 12) {
return("#6ef3ff")  # Urban expansion, was: #000000 DONE
} else if (source == 13 || target == 13) {
return("#474ca8")  # Fuelwood harvest, was: #b66dff DONE
} else if (source == 14 || target == 14) {
return("#5a0075")  # Selective logging, was: #009292 DONE
} else if (source == 15 || target == 15) {
return("#960000")  # Wildfires, was: #924900 DONE
} else if (source == 16 || target == 16) {
return("#b36122")  # Drought, was: #db6d00 DONE
} else if (source == 17 || target == 17) {
return("#d03c50")  # Insects and pathogens, was: #ffff6d DONE
} else if (source == 18 || target == 18) {
return("#c1a23b")  # Storms, was: #ff6db6 DONE
} else if (source == 19 || target == 19) {
return("#f296a3")  # Permafrost thaw, was: #b6dbff
} else {
return("grey") #other stays same
}
}
makeLightColor <- function(color) {
if (color=="#006ddb") {
return("#8BC5FF")  # Commodity, stays same
} else if (color=="#328e78") {
return("#A1DECF")  # Subsistence agriculture, was: #490092, DONE
} else if (color=="#5a0075") {
return("#D5ABFF")  # Clear-cut logging, was: #004949 DONE
} else if (color=="#6ef3ff") {
return("#C5FAFF")  # Urban expansion, was: #000000 DONE
} else if (color=="#474ca8") {
return("#B3B5DF")  # Fuelwood harvest, was: #b66dff DONE
} else if (color=="#5a0075") {
return("#EDBDFF")  # Selective logging, was: #009292 DONE
} else if (color=="#960000") {
return("#FFBAB0")  # Wildfires, was: #924900 DONE
} else if (color=="#b36122") {
return("#ECBE9B")  # Drought, was: #db6d00 DONE
} else if (color=="#d03c50") {
return("#ECB1B9")  # Insects and pathogens, was: #ffff6d DONE
} else if (color=="#c1a23b") {
return("#E7DAB0")  # Storms, was: #ff6db6 DONE
} else if (color=="#f296a3") {
return("#FFEBED")  # Permafrost thaw, was: #b6dbff
} else {
return("grey") #other stays same
}
}
#works:
makeNodeColor <- function(nodeName){
if (grepl("Non-timber commodity production", nodeName)) {
return("#006ddb")  # Commodity, stays same
} else if (grepl("Subsistence agriculture", nodeName)) {
return("#328e78")
} else if (grepl("Clear-cut logging", nodeName)) {
return("#5a0075")
} else if (grepl("Urban expansion", nodeName)) {
return("#6ef3ff")
} else if (grepl("Fuelwood harvest", nodeName)) {
return("#474ca8")
} else if (grepl("Selective logging", nodeName)) {
return("#5a0075")
} else if (grepl("Wildfire", nodeName)) {
return("#960000")
} else if (grepl("Drought", nodeName)) {
return("#b36122")
} else if (grepl("Insects & pathogens", nodeName)) {
return("#d03c50")
} else if (grepl("Storms", nodeName)) {
return("#c1a23b")
} else if (grepl("Permafrost thaw", nodeName)) {
return("#f296a3")
} else {
return("grey") #other stays same
}
}
#add node and link color columns to help change colors, use for d3 object
nodes <- mutate(nodes, color = sapply(1:nrow(nodes), function(i) makeNodeColor(nodes$name[i])))#adding color column based on function
links <- mutate(links, color = sapply(1:nrow(links), function(i) makeLinkColor(links$source[i], links$target[i])))#adding link_color column based on function
links <- links %>%
mutate(lightColor = sapply(color, makeLightColor)) #adds column with lightened links, this is created so we can lighten links with a 0 in trusted_value column (the "guesses")
large_scale_drivers$trusted_value <- 1
largeSub <- large_scale_drivers%>%
select(driver, region, trusted_value)
intSub <- intermediate_scale%>%
select(driver, region, trusted_value)
driversCombined <- rbind(largeSub, intSub)
driversCombined <- driversCombined %>%
mutate(abbreviated_region = case_when(
region == "Temperate & Subtropical North America" ~ "Te/St N. America",
region == "Temperate & Subtropical S. Hemisphere" ~ "Te/St S. Hemisphere",
region == "Temperate & Subtropical Asia" ~ "Te/St Asia",
region == "Temperate & Subtropical Europe" ~ "Te/St Europe+",
region == "Tropical Asia & Oceania" ~ "Tr Asia & Oceania",
region == "Tropical W. Hemisphere" ~ "Tr Americas",
region == "Tropical Africa" ~ "Tr Africa",
region == "Boreal North America" ~ "Bo N. America",
region == "Boreal Eurasia" ~ "Bo Eurasia",
TRUE ~ region  # Default case for other regions
))
driversCombined <- driversCombined %>%
mutate(abbreviated_region = gsub(" ", "_", abbreviated_region),
abbreviated_driver = gsub(" ", "_", driver))
#add column to the combined driver data frame in order to map it to links data frame
driversCombined$link_connections <- paste(driversCombined$abbreviated_region, driversCombined$abbreviated_driver, sep = "_to_")
#joining by link_connections to add trusted_value column to links data frame to allow it to be colored
links <- links %>%
left_join(driversCombined %>% select(link_connections, trusted_value), by = "link_connections")
links <- links%>%
mutate(trusted_value=if_else(is.na(trusted_value), 1, trusted_value),
colorFinal=if_else(trusted_value==0, lightColor,color))  #if true this otherwise that
#below lines work to automatically update the colors, object test is used in SankeyNetwork call
##### llm testing #####
dmn <- paste0("d3.scaleOrdinal().domain(['",
paste(nodes$node_group,collapse = "','"),
"','",
paste(links$link_connections_abb, collapse = "','")
,"'])")
rng <- paste0(" .range(['",
paste(c(nodes$color,links$colorFinal), collapse = "','"),
"'])")
test <- paste0(dmn,rng)
sankey_graph <- sankeyNetwork(Links = links, Nodes = nodes, Source = "source", Target = "target", Value = "value", NodeID="name",units = "TWh", fontSize = 16, nodeWidth = 30,
NodeGroup = "node_group",
LinkGroup = "link_connections_abb",
# LinkGroup = "link_color",
margin = list(left = 40, right = 250, bottom=1),#you can play with the margins here
colourScale = test,
#colourScale = category_colors_domain,
sinksRight = F,#aligns the right-most nodes outside of the diagram
width = 2500, #adjusts the overall width of the Sankey
height = 1000 #adjusts the height of the sankey
)
sankey_graph
view(links)
version
library(dplyr) #NOTE- some dplyr functions may be masked, fix with dplyr::
library(car)
library(readxl)
library(lme4)
demographyData <-read.csv("C:\\Users\\irisa\\Documents\\Archbold\\Intern Project\\ecABSdemog.csv")
demographyData <- demographyData[demographyData$bald==1,]
fig1Data <- read_csv("cleanData/roadData.csv")#this is the bald1data
setwd(C:\\Users\\irisa\\Documents\\GitHub\\Florida\\Eryngium Manuscript)
setwd(C:\\Users\\irisa\\Documents\\GitHub\\Florida\\Eryngium Manuscript)
setwd(C:/Users/irisa/Documents/GitHub/Florida/Eryngium Manuscript)
setwd(C:Users/irisa/Documents/GitHub/Florida/Eryngium Manuscript)
setwd("C:\\Users\\irisa\\Documents\\GitHub\\Florida\\Eryngium Manuscript")
demographyData <-read.csv("C:\\Users\\irisa\\Documents\\Archbold\\Intern Project\\ecABSdemog.csv")
demographyData <- demographyData[demographyData$bald==1,]
fig1Data <- read_csv("cleanData/roadData.csv")#this is the bald1data
#adds column of NAs for road dist, this is how we;re creating variables
demographyData$roadDistance <- NA
#cutoff variable allows you to set cutoffs around each of the road distances and "capture" those plants, can mess with the values
cutoff <- .25
demographyData$roadDistance <- NA
#dfine zones one at a time, 1s refer to my roadDistance 1 (1m), do 4 times change 1 to 2,3,4
demographyData$roadDistance[demographyData$y.cor>=(1-cutoff)&demographyData$y.cor<(1+cutoff)]<- 1
demographyData$roadDistance[demographyData$y.cor>=(2-cutoff)&demographyData$y.cor<(2+cutoff)]<- 2
demographyData$roadDistance[demographyData$y.cor>=(3-cutoff)&demographyData$y.cor<(3+cutoff)]<- 3
demographyData$roadDistance[demographyData$y.cor>=(4-cutoff)&demographyData$y.cor<(4+cutoff)]<- 4
#initialize the variable as full of NA values
demographyData$alive22 <- NA
# %in% tells to just look at these values (1,3,5) could do triple OR statement, I am only going to do this for 1,3 so it can be, basically %in% checks if something is equal to multiple things
demographyData$alive22[demographyData$s22 %in% c(1,3, 5)] <- 1 #assigns 1 to all living plants
#could make one for flowering,
demographyData$flwr21 <- NA
demographyData$flwr21<- demographyData$h22>=1 #this creates a column of TRUE FALSE
demographyData$seedlings22 <- NA
demographyData$seedlings22[demographyData$s22 %in% c(5)] <- 1
##mKING s22 seedling survival column
demographyData$seedlingSurvival22[!is.na(demographyData$s21)&demographyData$s21==5 & demographyData$s22==1]<- 1
demographyData$seedlingSurvival22[!is.na(demographyData$s21)&demographyData$s21==5 & demographyData$s22==0] <- 0
demographyData$seedlingSurvival21[!is.na(demographyData$s20)&demographyData$s20==5 & demographyData$s21==1]<- 1
demographyData$seedlingSurvival21[!is.na(demographyData$s20)&demographyData$s20==5 & demographyData$s21==0] <- 0
##2020
demographyData$seedlingSurvival20[!is.na(demographyData$s19)&demographyData$s19==5 & demographyData$s20==1]<- 1
demographyData$seedlingSurvival20[!is.na(demographyData$s19)&demographyData$s21==5 & demographyData$s20==0] <- 0
##rowSums
##need it to id rows with all NAs and skip over those rows, we don't want NAs, could make a column and mark with 1s or 0s (tellw which colum to run on)
demographyData$seedlingSurvival20to22 <- NA
demographyData$seedlingSurvival20to22 <- rowSums(demographyData[,c("seedlingSurvival20","seedlingSurvival21", "seedlingSurvival22")][!is.na(demographyData$seedlingSurvival20) | !is.na(demographyData$seedlingSurvival21) | !is.na(demographyData$seedlingSurvival22)], na.rm=TRUE)
temp <- aggregate(list(alive22=demographyData$alive22, seedlings22=demographyData$seedlings22, heads21=demographyData$h21), list(patchDistance=demographyData$patch, roadDistance=demographyData$roadDistance), sum, na.rm=TRUE)
##merges in mean seedling survival, temp3 is mean
temp3 <- aggregate(list(seedlingSurvival22=demographyData$seedlingSurvival22), list(patchDistance=demographyData$patch, roadDistance=demographyData$roadDistance), mean, na.rm=TRUE)
##merge temp and temp3
temp4 <-merge(temp, temp3, by=c("patchDistance", "roadDistance"), all.x = TRUE, all.y = FALSE)
temp2 <- merge(fig1Data, temp4, by=c("patchDistance", "roadDistance"), all.x = TRUE, all.y = FALSE)
#SKIP HERE TO MAKE THE HEADS VS SEED ABUNDANCE FIGURE
flwrFig1Data <-merge(fig1Data, temp, by=c("patchDistance", "roadDistance"), all.x = TRUE, all.y = FALSE) #merges fig1 data and temp which has eryngium demography data including flowring heads, should I remove NAs in flowering heads?
#chanigng NA to zero, ##opposite of is.na is !is.na()
temp2$alive22[is.na(temp2$alive)]<-0
##^tells that anything that is an NA value gets a zero
temp2$seedlings22[is.na(temp2$seedlings22)] <-0
library(ggplot2)
#this graph is for seed abundance vs number flowering heads
bestfit<- lm(flwrFig1Data$seedAbundance~flwrFig1Data$heads21)
flwrAbundance <- ggplot(flwrFig1Data, aes(x=flwrFig1Data$heads21, y=flwrFig1Data$seedAbundance))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Flowering Heads 2021")+xlab("Number of Flowering Heads")+ylab("Seed Abundance")
##doing this for all alive plants
bestfitAlive<- lm(temp2$seedAbundance~temp2$alive22)
abundanceAlive <- ggplot(temp2, aes(x=alive22, y=seedAbundance))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Plants")+xlab("Number of Plants")+ylab("Seed Abundance")
abundanceAlive
cor.test(temp2$alive22, temp2$seedAbundance)
##making seed germination figure
library(tidyverse)
library(ggplot2)
germinationData <- read.csv("C:/Users/irisa/Documents/Archbold/germinationData/germinationData.csv")
bald1 <- subset(germinationData, site=="Bald 1")
bald1TotalSeeds <- sum(bald1$seeds) #472
bald1TotalGerminated <- sum(bald1$total.germ)#85
bald1SucessRate <- (bald1TotalGerminated/bald1TotalSeeds)*100 #success rate as percent, 18%
bald59 <- subset(germinationData, site=="Bald 59")
bald59TotalSeeds <- sum(bald59$seeds) #28
bald59TotalGerminated <- sum(bald59$total.germ)#9
bald59SuccessRate <- (bald59TotalGerminated/bald59TotalSeeds)*100 #32
bald62<- subset(germinationData, site=="Bald 62")
bald62TotalSeeds <- sum(bald62$seeds) #11
bald62TotalGerm <- sum(bald62$total.germ) #1
bald62SuccessRate <- (bald62TotalGerm/bald62TotalSeeds)*100 #9
bald <- c("1", "59", "62")
TotalSeeds <- c(bald1TotalSeeds, bald59TotalSeeds, bald62TotalSeeds)
TotalGerminated <- c(bald1TotalGerminated, bald59TotalGerminated, bald62TotalGerm)
successRate <- c(bald1SucessRate,bald59SuccessRate, bald62SuccessRate)
germinationAnalysis <- data.frame(bald, TotalSeeds, TotalGerminated, successRate)
view(germinationAnalysis)
habitat <- c("road", "scrub", "scrub")
habitat <- c("road", "scrub", "scrub")
germinationAnalysis <- data.frame(bald, TotalSeeds, TotalGerminated, successRate, habitat)
view(germinationAnalysis)
view(germinationData)
unique(germinationData$site)
c("Bald 1"="road", "Bald 59" = "scrub", "Bald 62"="scrub")
c("Bald 1"="road", "Bald 59" = "scrub", "Bald 62"="scrub")[germinationData$site]
germinationData$habitat <- c("Bald 1"="road", "Bald 59" = "scrub", "Bald 62"="scrub")[germinationData$site]
View(germinationData)
library(stats)
model <- glm(formula = cbind(total.germ, seeds-total.germ)~habitat, family = binomial, data=germinationData)
summary(model)
