#adds column of NAs for road dist, this is how we;re creating variables
demographyData$roadDistance <- NA
#cutoff variable allows you to set cutoffs around each of the road distances and "capture" those plants, can mess with the values
cutoff <- .25
demographyData$roadDistance <- NA
#dfine zones one at a time, 1s refer to my roadDistance 1 (1m), do 4 times change 1 to 2,3,4
demographyData$roadDistance[demographyData$y.cor>=(1-cutoff)&demographyData$y.cor<(1+cutoff)]<- 1
demographyData$roadDistance[demographyData$y.cor>=(2-cutoff)&demographyData$y.cor<(2+cutoff)]<- 2
demographyData$roadDistance[demographyData$y.cor>=(3-cutoff)&demographyData$y.cor<(3+cutoff)]<- 3
demographyData$roadDistance[demographyData$y.cor>=(4-cutoff)&demographyData$y.cor<(4+cutoff)]<- 4
#initialize the variable as full of NA values
demographyData$alive22 <- NA
# %in% tells to just look at these values (1,3,5) could do triple OR statement, I am only going to do this for 1,3 so it can be, basically %in% checks if something is equal to multiple things
demographyData$alive22[demographyData$s22 %in% c(1,3, 5)] <- 1 #assigns 1 to all living plants
#could make one for flowering,
demographyData$flwr21 <- NA
demographyData$flwr21<- demographyData$h22>=1 #this creates a column of TRUE FALSE
demographyData$seedlings22 <- NA
demographyData$seedlings22[demographyData$s22 %in% c(5)] <- 1
##mKING s22 seedling survival column
demographyData$seedlingSurvival22[!is.na(demographyData$s21)&demographyData$s21==5 & demographyData$s22==1]<- 1
demographyData$seedlingSurvival22[!is.na(demographyData$s21)&demographyData$s21==5 & demographyData$s22==0] <- 0
demographyData$seedlingSurvival21[!is.na(demographyData$s20)&demographyData$s20==5 & demographyData$s21==1]<- 1
demographyData$seedlingSurvival21[!is.na(demographyData$s20)&demographyData$s20==5 & demographyData$s21==0] <- 0
##2020
demographyData$seedlingSurvival20[!is.na(demographyData$s19)&demographyData$s19==5 & demographyData$s20==1]<- 1
demographyData$seedlingSurvival20[!is.na(demographyData$s19)&demographyData$s21==5 & demographyData$s20==0] <- 0
##rowSums
##need it to id rows with all NAs and skip over those rows, we don't want NAs, could make a column and mark with 1s or 0s (tellw which colum to run on)
demographyData$seedlingSurvival20to22 <- NA
demographyData$seedlingSurvival20to22 <- rowSums(demographyData[,c("seedlingSurvival20","seedlingSurvival21", "seedlingSurvival22")][!is.na(demographyData$seedlingSurvival20) | !is.na(demographyData$seedlingSurvival21) | !is.na(demographyData$seedlingSurvival22)], na.rm=TRUE)
temp <- aggregate(list(alive22=demographyData$alive22, seedlings22=demographyData$seedlings22, heads21=demographyData$h21), list(patchDistance=demographyData$patch, roadDistance=demographyData$roadDistance), sum, na.rm=TRUE)
##merges in mean seedling survival, temp3 is mean
temp3 <- aggregate(list(seedlingSurvival22=demographyData$seedlingSurvival22), list(patchDistance=demographyData$patch, roadDistance=demographyData$roadDistance), mean, na.rm=TRUE)
##merge temp and temp3
temp4 <-merge(temp, temp3, by=c("patchDistance", "roadDistance"), all.x = TRUE, all.y = FALSE)
temp2 <- merge(fig1Data, temp4, by=c("patchDistance", "roadDistance"), all.x = TRUE, all.y = FALSE)
#SKIP HERE TO MAKE THE HEADS VS SEED ABUNDANCE FIGURE
flwrFig1Data <-merge(fig1Data, temp, by=c("patchDistance", "roadDistance"), all.x = TRUE, all.y = FALSE) #merges fig1 data and temp which has eryngium demography data including flowring heads, should I remove NAs in flowering heads?
#chanigng NA to zero, ##opposite of is.na is !is.na()
temp2$alive22[is.na(temp2$alive)]<-0
##^tells that anything that is an NA value gets a zero
temp2$seedlings22[is.na(temp2$seedlings22)] <-0
library(ggplot2)
#this graph is for seed abundance vs number flowering heads
bestfit<- lm(flwrFig1Data$seedAbundance~flwrFig1Data$heads21)
flwrAbundance <- ggplot(flwrFig1Data, aes(x=flwrFig1Data$heads21, y=flwrFig1Data$seedAbundance))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Flowering Heads 2021")+xlab("Number of Flowering Heads")+ylab("Seed Abundance")
##doing this for all alive plants
bestfitAlive<- lm(temp2$seedAbundance~temp2$alive22)
abundanceAlive <- ggplot(temp2, aes(x=alive22, y=seedAbundance))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Plants")+xlab("Number of Plants")+ylab("Seed Abundance")
abundanceAlive
cor.test(temp2$alive22, temp2$seedAbundance)
##making seed germination figure
library(tidyverse)
library(ggplot2)
germinationData <- read.csv("C:/Users/irisa/Documents/Archbold/germinationData/germinationData.csv")
bald1 <- subset(germinationData, site=="Bald 1")
bald1TotalSeeds <- sum(bald1$seeds) #472
bald1TotalGerminated <- sum(bald1$total.germ)#85
bald1SucessRate <- (bald1TotalGerminated/bald1TotalSeeds)*100 #success rate as percent, 18%
bald59 <- subset(germinationData, site=="Bald 59")
bald59TotalSeeds <- sum(bald59$seeds) #28
bald59TotalGerminated <- sum(bald59$total.germ)#9
bald59SuccessRate <- (bald59TotalGerminated/bald59TotalSeeds)*100 #32
bald62<- subset(germinationData, site=="Bald 62")
bald62TotalSeeds <- sum(bald62$seeds) #11
bald62TotalGerm <- sum(bald62$total.germ) #1
bald62SuccessRate <- (bald62TotalGerm/bald62TotalSeeds)*100 #9
bald <- c("1", "59", "62")
TotalSeeds <- c(bald1TotalSeeds, bald59TotalSeeds, bald62TotalSeeds)
TotalGerminated <- c(bald1TotalGerminated, bald59TotalGerminated, bald62TotalGerm)
successRate <- c(bald1SucessRate,bald59SuccessRate, bald62SuccessRate)
germinationAnalysis <- data.frame(bald, TotalSeeds, TotalGerminated, successRate)
view(germinationAnalysis)
habitat <- c("road", "scrub", "scrub")
habitat <- c("road", "scrub", "scrub")
germinationAnalysis <- data.frame(bald, TotalSeeds, TotalGerminated, successRate, habitat)
view(germinationAnalysis)
view(germinationData)
unique(germinationData$site)
c("Bald 1"="road", "Bald 59" = "scrub", "Bald 62"="scrub")
c("Bald 1"="road", "Bald 59" = "scrub", "Bald 62"="scrub")[germinationData$site]
germinationData$habitat <- c("Bald 1"="road", "Bald 59" = "scrub", "Bald 62"="scrub")[germinationData$site]
View(germinationData)
library(stats)
model <- glm(formula = cbind(total.germ, seeds-total.germ)~habitat, family = binomial, data=germinationData)
summary(model)
library(tidyverse)
library(lme4)
#load data frames for models
# germinationData <- read_csv("~/Documents/GitHub/Florida/Eryngium Manuscript/cleanData/germinationData.csv")
load("cleanData/germinationData.RData")
load("dataFrames/combinedData.RData")
load("dataFrames/flwrFig1Data.RData")
fig1Data <- read_csv("cleanData/roadData.csv")
scrubData <- read_csv("rosemaryBaldsCombined.csv")
scrubData<- subset(scrubData, bald != 45)
flwrFig1Data$heads21_scaled <- scale(flwrFig1Data$heads21)
flwrFig1Data$patchDistance_scaled <- scale(flwrFig1Data$patchDistance)
flwrFig1Data$roadDistance_scaled <- scale(flwrFig1Data$roadDistance)
flwrFig1Data$meanElevation_scaled <- scale(flwrFig1Data$meanElevation)
fig1Data$roadDistanceSq <- (fig1Data$roadDistance)*(fig1Data$roadDistance)
#Road Model:
# glmeNegBinomial<- glmer.nb(seedAbundance~patchDistance+ roadDistance + poly(roadDistance,2) +(1|transectNum), data=fig1Data)
#
# glmeNegBinomial<- glmer.nb(seedAbundance~patchDistance+ roadDistance + roadDistanceSq +(1|transectNum), data=fig1Data) #altered polynomial tern so it wouldn't give NAs in summary
glmeNegBinomial <- glmer.nb(seedAbundance~ roadDistance + patchDistance + +meanElevation_scaled+poly(roadDistance,2)+(1|transectNum), data=flwrFig1Data[flwrFig1Data$patchDistance<=120,])
#Scrub v Road model
control_params <- glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 500000))
scrubVsRoad<- glmer.nb(seedAbundance~habitat + (1|site), data=combinedData, control = control_params)
#germination model
germinationModel <- glm(formula = cbind(total.germ, seeds-total.germ)~habitat, family = binomial, data=germinationData)
model <- glm(formula = cbind(total.germ, seeds-total.germ)~habitat + (1|code), family = binomial, data=germinationData)# trying to add random effect for site
model <- glm(formula = cbind(total.germ, seeds-total.germ)~habitat, family = binomial, data=germinationData)
summary(model)
m2<- glmer(cbind(total.germ, seeds - total.germ) ~ habitat + (1 | site),
family = binomial, data = germinationData)
#Rosemary model (just scrub)
control <- glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 2e6))
nearFarModel <- glmer.nb(seedAbundance ~ nearFar + (1 | bald), offset = log(massActual),
data = scrubData, control = control, verbose = FALSE)
# analysis of near/far from rosemary
scrubData$nearFar <- factor(scrubData$nearFar, levels = c("N", "F"))
scrubData$seedAbundance_adjusted <- scrubData$seedAbundance + 1
control_params <- glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000))
scrubData$seedAbundance_adjusted <- scrubData$seedAbundance + 1
control_params <- glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000))
nearFarModel <- glmer.nb(seedAbundance~as.numeric(nearFar)+(1|bald), offset=log(massActual), data=scrubData, verbose=TRUE, control= control_params)
isSingular(nearFarModel)
#adjusted
nearFarModelAdjusted <- glmer.nb(seedAbundance_adjusted~nearFar+(1|bald), offset=log(massActual), data=scrubData, verbose=FALSE)
#flowering heads and seeds
flwrElevationTest <- glmer.nb(seedAbundance ~ heads21_scaled + patchDistance_scaled + meanElevation_scaled+ roadDistance_scaled + (1 | transectNum), data = flwrFig1Data[flwrFig1Data$patchDistance<=130,], control = controls)
#flowering heads and seeds
controls <- glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 10e6))
flwrElevationTest <- glmer.nb(seedAbundance ~ heads21_scaled + patchDistance_scaled + meanElevation_scaled+ roadDistance_scaled + (1 | transectNum), data = flwrFig1Data[flwrFig1Data$patchDistance<=130,], control = controls)
#seeds and seedlings
seedlingsTest <- glmer.nb(seedlings22~ seedAbundance + roadDistance+(1|transectNum), data=flwrFig1Data[flwrFig1Data$patchDistance<=150,], control=controls)
#table making function:
extract_model_info <- function(model, model_name, test_statistic_type) {
# Get the summary of the model
summary_model <- summary(model)
# Get the ANOVA table
anova_model <- Anova(model, type = 3)
# Extract coefficients information from summary
coefficients <- summary_model$coefficients
# Create a data frame for coefficients
model_info <- data.frame(
variable = rownames(coefficients),
estimate = coefficients[, "Estimate"],
std_error = coefficients[, "Std. Error"],
test_statistic = coefficients[, "z value"],  # For GLMMs, use "t value" for LMMs
p_value = coefficients[, "Pr(>|z|)"]  # For GLMMs, use "Pr(>|t|)" for LMMs
)
# Extract ANOVA information and create a data frame
anova_info <- data.frame(
variable = rownames(anova_model),
chi_squared = anova_model$Chisq,  # Adjust based on Anova output
p_value_anova = anova_model$`Pr(>Chisq)`  # Adjust based on Anova output
)
# Add the test_statistic_type column
anova_info <- mutate(anova_info, test_statistic_type = test_statistic_type)
# Adjust the variable names in anova_info to match the model_info
#add new lines here for every model with every variable name possible in that model
anova_info$variable <- ifelse(anova_info$variable == "habitat", "habitatscrub", anova_info$variable)
anova_info$variable <- ifelse(anova_info$variable == "nearFar", "nearFarN", anova_info$variable)
# Merge both data frames on the variable name
final_info <- left_join(model_info, anova_info, by = "variable")
# Create a row with the model name
model_name_row <- data.frame(
variable = model_name,
estimate = NA,
std_error = NA,
test_statistic = NA,
p_value = NA,
chi_squared = NA,
p_value_anova = NA,
test_statistic_type = NA
)
# Combine the model name row and the model information
final_info <- bind_rows(model_name_row, final_info)
return(final_info)
}
# Extract information for both models with manually specified test statistic type
model_road_info <- extract_model_info(glmeNegBinomial, model_name = "Roadside", test_statistic_type = "Type II Wald chisquare tests")
library(MASS)
# Extract information for both models with manually specified test statistic type
model_road_info <- extract_model_info(glmeNegBinomial, model_name = "Roadside", test_statistic_type = "Type II Wald chisquare tests")
library(car)
# Extract information for both models with manually specified test statistic type
model_road_info <- extract_model_info(glmeNegBinomial, model_name = "Roadside", test_statistic_type = "Type II Wald chisquare tests")
model_scrub_info <- extract_model_info(scrubVsRoad, model_name = "Scrub vs Road", test_statistic_type = "Type II Wald chisquare tests")
model_near_far_info <- extract_model_info(nearFarModel, model_name = "Near vs Far", test_statistic_type = "Type II Wald chisquare tests")
model_near_far_info <- extract_model_info(nearFarModelAdjusted, model_name = "Near vs Far", test_statistic_type = "Type II Wald chisquare tests")
model_near_far_info
model_scrub_info
Anova(nearFarModelAdjusted)
summary(nearFarModelAdjusted)
anova_info$variable <- ifelse(anova_info$variable == "nearFar", "nearFarF", anova_info$variable)
#table making function:
extract_model_info <- function(model, model_name, test_statistic_type) {
# Get the summary of the model
summary_model <- summary(model)
# Get the ANOVA table
anova_model <- Anova(model, type = 3)
# Extract coefficients information from summary
coefficients <- summary_model$coefficients
# Create a data frame for coefficients
model_info <- data.frame(
variable = rownames(coefficients),
estimate = coefficients[, "Estimate"],
std_error = coefficients[, "Std. Error"],
test_statistic = coefficients[, "z value"],  # For GLMMs, use "t value" for LMMs
p_value = coefficients[, "Pr(>|z|)"]  # For GLMMs, use "Pr(>|t|)" for LMMs
)
# Extract ANOVA information and create a data frame
anova_info <- data.frame(
variable = rownames(anova_model),
chi_squared = anova_model$Chisq,  # Adjust based on Anova output
p_value_anova = anova_model$`Pr(>Chisq)`  # Adjust based on Anova output
)
# Add the test_statistic_type column
anova_info <- mutate(anova_info, test_statistic_type = test_statistic_type)
# Adjust the variable names in anova_info to match the model_info
#add new lines here for every model with every variable name possible in that model
anova_info$variable <- ifelse(anova_info$variable == "habitat", "habitatscrub", anova_info$variable)
anova_info$variable <- ifelse(anova_info$variable == "nearFar", "nearFarF", anova_info$variable)
# Merge both data frames on the variable name
final_info <- left_join(model_info, anova_info, by = "variable")
# Create a row with the model name
model_name_row <- data.frame(
variable = model_name,
estimate = NA,
std_error = NA,
test_statistic = NA,
p_value = NA,
chi_squared = NA,
p_value_anova = NA,
test_statistic_type = NA
)
# Combine the model name row and the model information
final_info <- bind_rows(model_name_row, final_info)
return(final_info)
}
model_near_far_info <- extract_model_info(nearFarModelAdjusted, model_name = "Near vs Far", test_statistic_type = "Type II Wald chisquare tests")
model_near_far_info
# Combine both model information into a final table
final_table <- bind_rows(model_road_info, model_scrub_info, model_near_far_info)
view(final_table)
summary(glmeNegBinomial)
print(final_table)
view(final_table)
anova_info$variable <- ifelse(anova_info$variable == "poly(roadDistance, 2)2", anova_info$variable)
#table making function:
extract_model_info <- function(model, model_name, test_statistic_type) {
# Get the summary of the model
summary_model <- summary(model)
# Get the ANOVA table
anova_model <- Anova(model, type = 3)
# Extract coefficients information from summary
coefficients <- summary_model$coefficients
# Create a data frame for coefficients
model_info <- data.frame(
variable = rownames(coefficients),
estimate = coefficients[, "Estimate"],
std_error = coefficients[, "Std. Error"],
test_statistic = coefficients[, "z value"],  # For GLMMs, use "t value" for LMMs
p_value = coefficients[, "Pr(>|z|)"]  # For GLMMs, use "Pr(>|t|)" for LMMs
)
# Extract ANOVA information and create a data frame
anova_info <- data.frame(
variable = rownames(anova_model),
chi_squared = anova_model$Chisq,  # Adjust based on Anova output
p_value_anova = anova_model$`Pr(>Chisq)`  # Adjust based on Anova output
)
# Add the test_statistic_type column
anova_info <- mutate(anova_info, test_statistic_type = test_statistic_type)
# Adjust the variable names in anova_info to match the model_info
#add new lines here for every model with every variable name possible in that model
anova_info$variable <- ifelse(anova_info$variable == "habitat", "habitatscrub", anova_info$variable)
anova_info$variable <- ifelse(anova_info$variable == "nearFar", "nearFarF", anova_info$variable)
anova_info$variable <- ifelse(anova_info$variable == "poly(roadDistance, 2)2", anova_info$variable)
# Merge both data frames on the variable name
final_info <- left_join(model_info, anova_info, by = "variable")
# Create a row with the model name
model_name_row <- data.frame(
variable = model_name,
estimate = NA,
std_error = NA,
test_statistic = NA,
p_value = NA,
chi_squared = NA,
p_value_anova = NA,
test_statistic_type = NA
)
# Combine the model name row and the model information
final_info <- bind_rows(model_name_row, final_info)
return(final_info)
}
# Extract information for both models with manually specified test statistic type
model_road_info <- extract_model_info(glmeNegBinomial, model_name = "Roadside", test_statistic_type = "Type II Wald chisquare tests")
anova_info$variable <- ifelse(anova_info$variable == "poly(roadDistance, 2)2", anova_info$variable, anova_info$variable)
#table making function:
extract_model_info <- function(model, model_name, test_statistic_type) {
# Get the summary of the model
summary_model <- summary(model)
# Get the ANOVA table
anova_model <- Anova(model, type = 3)
# Extract coefficients information from summary
coefficients <- summary_model$coefficients
# Create a data frame for coefficients
model_info <- data.frame(
variable = rownames(coefficients),
estimate = coefficients[, "Estimate"],
std_error = coefficients[, "Std. Error"],
test_statistic = coefficients[, "z value"],  # For GLMMs, use "t value" for LMMs
p_value = coefficients[, "Pr(>|z|)"]  # For GLMMs, use "Pr(>|t|)" for LMMs
)
# Extract ANOVA information and create a data frame
anova_info <- data.frame(
variable = rownames(anova_model),
chi_squared = anova_model$Chisq,  # Adjust based on Anova output
p_value_anova = anova_model$`Pr(>Chisq)`  # Adjust based on Anova output
)
# Add the test_statistic_type column
anova_info <- mutate(anova_info, test_statistic_type = test_statistic_type)
# Adjust the variable names in anova_info to match the model_info
#add new lines here for every model with every variable name possible in that model
anova_info$variable <- ifelse(anova_info$variable == "habitat", "habitatscrub", anova_info$variable)
anova_info$variable <- ifelse(anova_info$variable == "nearFar", "nearFarF", anova_info$variable)
anova_info$variable <- ifelse(anova_info$variable == "poly(roadDistance, 2)2", anova_info$variable, anova_info$variable)
# Merge both data frames on the variable name
final_info <- left_join(model_info, anova_info, by = "variable")
# Create a row with the model name
model_name_row <- data.frame(
variable = model_name,
estimate = NA,
std_error = NA,
test_statistic = NA,
p_value = NA,
chi_squared = NA,
p_value_anova = NA,
test_statistic_type = NA
)
# Combine the model name row and the model information
final_info <- bind_rows(model_name_row, final_info)
return(final_info)
}
# Extract information for both models with manually specified test statistic type
model_road_info <- extract_model_info(glmeNegBinomial, model_name = "Roadside", test_statistic_type = "Type II Wald chisquare tests")
model_scrub_info <- extract_model_info(scrubVsRoad, model_name = "Scrub vs Road", test_statistic_type = "Type II Wald chisquare tests")
model_near_far_info <- extract_model_info(nearFarModelAdjusted, model_name = "Near vs Far", test_statistic_type = "Type II Wald chisquare tests")
# Combine both model information into a final table
final_table <- bind_rows(model_road_info, model_scrub_info, model_near_far_info)
print(final_table)
view(final_table)
Anova(glmeNegBinomial)
#germination model
germinationModel <- glm(formula = cbind(total.germ, seeds-total.germ)~habitat, family = binomial, data=germinationData)
summary(germinationModel)
Anova(germinationModel)
summary(glmeNegBinomial)
summary(germinationModel)
Anova(germinationModel)
0.2573
summary(flwrElevationTest)
Anova(flwrElevationTest)
elevationData <- read_excel("Raw Data/Er elevation data for plots.xlsx")#subsetting so it is just the mean elevation column
library(readxl)
elevationData <- read_excel("Raw Data/Er elevation data for plots.xlsx")#subsetting so it is just the mean elevation column
roadsideOverviewPlot <- ggplot(data=fig1Data)+
geom_point(mapping=aes(x=patchDistance, y=roadDistance, size=seedAbundance))+
ggtitle("Seed Abundance Along 180 meters of Roadside")+
xlab("Distance Along the Road (m)")+
ylab("Distance From Back Line of Scrub (m)")+
scale_size_continuous(name = "Seed Abundance")  # Change the legend title
roadsideOverviewPlot
roadsideOverviewPlot <- ggplot(data=fig1Data)+
geom_point(mapping=aes(x=patchDistance,
y=roadDistance,
size=seedAbundance,
color= ifelse(seedAbundance==0, "grey30", "black")
))+
ggtitle("Seed Abundance Along 180 meters of Roadside")+
xlab("Distance Along the Road (m)")+
ylab("Distance From Back Line of Scrub (m)")+
scale_size_continuous(name = "Seed Abundance")  # Change the legend title
roadsideOverviewPlot
roadsideOverviewPlot <- ggplot(data=fig1Data)+
geom_point(mapping=aes(x=patchDistance,
y=roadDistance,
size=seedAbundance,
color= factor(ifelse(seedAbundance==0, "grey", "black")
)))+
ggtitle("Seed Abundance Along 180 meters of Roadside")+
xlab("Distance Along the Road (m)")+
ylab("Distance From Back Line of Scrub (m)")+
scale_size_continuous(name = "Seed Abundance")+  # Change the legend title
scale_color_manual(values = c("black" = "black", "grey" = "grey30"), guide = "none")
roadsideOverviewPlot
roadsideOverviewPlot <- ggplot(data=fig1Data)+
geom_point(mapping=aes(x=patchDistance,
y=roadDistance,
size=seedAbundance,
color= factor(ifelse(seedAbundance==0, "darkblue", "black")
)))+
ggtitle("Seed Abundance Along 180 meters of Roadside")+
xlab("Distance Along the Road (m)")+
ylab("Distance From Back Line of Scrub (m)")+
scale_size_continuous(name = "Seed Abundance")+  # Change the legend title
scale_color_manual(values = c("black" = "black", "darkblue" = "darkblue"), guide = "none")
roadsideOverviewPlot
roadsideOverviewPlot <- ggplot(data=fig1Data)+
geom_point(mapping=aes(x=patchDistance,
y=roadDistance,
size=seedAbundance,
color= factor(ifelse(seedAbundance==0, "grey30", "darkblue")
)))+
ggtitle("Seed Abundance Along 180 meters of Roadside")+
xlab("Distance Along the Road (m)")+
ylab("Distance From Back Line of Scrub (m)")+
scale_size_continuous(name = "Seed Abundance")+  # Change the legend title
scale_color_manual(values = c("grey30" = "grey30", "darkblue" = "darkblue"), guide = "none")
roadsideOverviewPlot
roadsideOverviewPlot <- ggplot(data=fig1Data)+
geom_point(mapping=aes(x=patchDistance,
y=roadDistance,
size=seedAbundance,
color= factor(ifelse(seedAbundance==0, "white", "black")
)))+
ggtitle("Seed Abundance Along 180 meters of Roadside")+
xlab("Distance Along the Road (m)")+
ylab("Distance From Back Line of Scrub (m)")+
scale_size_continuous(name = "Seed Abundance")+  # Change the legend title
scale_color_manual(values = c("white" = "white", "black" = "black"), guide = "none")
roadsideOverviewPlot
roadsideOverviewPlot <- ggplot(data = fig1Data) +
geom_point(mapping = aes(
x = patchDistance,
y = roadDistance,
size = seedAbundance,
color = factor(ifelse(seedAbundance == 0, "white", "black"))
)) +
ggtitle("Seed Abundance Along 180 meters of Roadside") +
xlab("Distance Along the Road (m)") +
ylab("Distance From Back Line of Scrub (m)") +
scale_size_continuous(name = "Seed Abundance") +  # Legend for size
scale_color_manual(values = c("white" = "white", "black" = "black"), guide = "none")  # Manual color assignment
roadsideOverviewPlot
#just for this scatterplot I only want to plot seed Abundance greater than 1
subsetRoad <- fig1Data%>%
filter(seedAbundance>=1)
roadsideOverviewPlot <- ggplot(data = subsetRoad) +
geom_point(mapping = aes(
x = patchDistance,
y = roadDistance,
size = seedAbundance,
color = factor(ifelse(seedAbundance == 0, "white", "black"))
)) +
ggtitle("Seed Abundance Along 180 meters of Roadside") +
xlab("Distance Along the Road (m)") +
ylab("Distance From Back Line of Scrub (m)") +
scale_size_continuous(name = "Seed Abundance") +  # Legend for size
scale_color_manual(values = c("white" = "white", "black" = "black"), guide = "none")  # Manual color assignment
roadsideOverviewPlot
roadsideOverviewPlot <- ggplot(data = subsetRoad) +
geom_point(mapping = aes(
x = patchDistance,
y = roadDistance,
size = seedAbundance,
color = factor(ifelse(seedAbundance == 0, "white", "black"))
)) +
ggtitle("Seed Abundance Along 180 meters of Roadside") +
xlab("Distance Along the Road (m)") +
ylab("Distance From Back Line of Scrub (m)") +
scale_size_continuous(name = "Seed Abundance",  breaks = c(1, 10, 20, 30, 40)) +  # Legend for size
scale_color_manual(values = c("white" = "white", "black" = "black"), guide = "none")  # Manual color assignment
roadsideOverviewPlot
save_directory <- "graphs"
save_directory <- "finalFigures"
saveRDS(object = roadsideOverviewPlot, file.path(save_directory, "roadsideOverviewPlot.rds"))
#cleaning up the table
library(tidyverse)
modelTable <- read_csv("C:\\Users\\irisa\\Downloads\\Model Table - Sheet1.csv")
View(modelTable)
tibble(modelTable)
str(modelTable)
#pasting standard error into estimate column, 3 indicates to three decimal places
modelTable1<- modelTable%>%
mutate(estimate_se = ifelse(!is.na(estimate) & !is.na(std_error),
paste0(round(estimate, 3), " ± ", round(std_error, 3)),
NA))
View(modelTable1)
#selecting just the columns I want in the order that I want them
newTable <- modelTable %>%
select(variable, estimate_se, test_statistic_z, p_value_anova, test_statistic_type)
#selecting just the columns I want in the order that I want them
newTable <- modelTable1 %>%
select(variable, estimate_se, test_statistic_z, p_value_anova, test_statistic_type)
#selecting just the columns I want in the order that I want them
newTable <- modelTable1 %>%
dplyr:: select(variable, estimate_se, test_statistic_z, p_value_anova, test_statistic_type)
view(newTable)
write.csv(newTable, "newTable.csv", row.names = FALSE)
view(newTable)
