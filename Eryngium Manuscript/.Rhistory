abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedlings22, y=seedAbundance))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seedlings")+ylab("Seed Abundance")
abundanceSeedlings
##making graph of seedlings vs seed abundance
bestfit<- glm(flwrFig1Data$seedAbundance~flwrFig1Data$seedlings22, family=poisson)
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedlings22, y=seedAbundance))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seedlings")+ylab("Seed Abundance")
abundanceSeedlings
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedlings22, y=seedAbundance))+
geom_point()+
geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seedlings")+ylab("Seed Abundance")
abundanceSeedlings
flwrFig1Data$fit <- predict(bestfit, type="response")
predict(bestfit, type="response")
duplicated(flwrFig1Data)
duplicated(flwrFig1Data[, c("seedlings22", "seedAbundance")])
flwrFig1Data$fit <- predict(bestfit, newdata =bestfit,  type="response")
?predict
?predict.glm
predict(bestfit, newdata =bestfit,  type="response")
##making graph of seedlings vs seed abundance
bestfit<- glm(seedAbundance~seedlings22, data = flwrFig1Data, family=poisson)
flwrFig1Data$fit <- predict(bestfit, newdata =bestfit,  type="response")
##making graph of seedlings vs seed abundance
bestfit<- glm(seedAbundance~seedlings22, data = flwrFig1Data, family=poisson)
bestfit
flwrFig1Data$fit <- predict(bestfit, newdata =flwrFig1Data,  type="response")
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedlings22, y=seedAbundance))+
geom_point()+
geom_line(aes(y = fit) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seedlings")+ylab("Seed Abundance")
abundanceSeedlings
bestfit
ggplot(flwrFig1Data, aes(x=seedlings22, y=seedAbundance))+
geom_point()+
geom_line(aes(y = fit) )
summary(flwrFig1Data)
summary(modelfit)
summary(bestfit)
?glm
?poisson
##making graph of seedlings vs seed abundance
bestfit<- glm(seedAbundance~seedlings22, data = flwrFig1Data, family=poisson())
flwrFig1Data$fit <- predict(bestfit, newdata =flwrFig1Data,  type="response")
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedlings22, y=seedAbundance))+
geom_point()+
geom_line(aes(y = fit) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seedlings")+ylab("Seed Abundance")
abundanceSeedlings
flwrFig1Data$fit <- predict(bestfit, newdata =flwrFig1Data,  type="link")
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedlings22, y=seedAbundance))+
geom_point()+
geom_line(aes(y = exp(fit))) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seedlings")+ylab("Seed Abundance")
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedlings22, y=seedAbundance))+
geom_point()+
geom_line(aes(y = exp(fit)) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seedlings")+ylab("Seed Abundance")
plot(flwrFig1Data$fit ~ flwrFig1Data$seedlings22)
bestfit
##making graph of seedlings vs seed abundance
bestfit<- glm(seedlings22~seedAbundance, data = flwrFig1Data, family=poisson())
flwrFig1Data$fit <- predict(bestfit, newdata =flwrFig1Data,  type="link")
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedlings22, y=seedAbundance))+
geom_point()+
geom_line(aes(y = fit) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seedlings")+ylab("Seed Abundance")
abundanceSeedlings
summary(bestfit)
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedAbundance, y=seedlings22))+
geom_point()+
geom_line(aes(y = fit) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seedlings")+ylab("Seed Abundance")
abundanceSeedlings
abundanceSeedlings
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedAbundance, y=seedlings22))+
geom_point()+
geom_line(aes(y = fit) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seeds")+ylab("Seedlings")
abundanceSeedlings
##making graph of seedlings vs seed abundance
bestfit<- glm(seedlings22~poly(seedAbundance,2), data = flwrFig1Data, family=poisson())
summary(bestfit)
flwrFig1Data$fit <- predict(bestfit, newdata =flwrFig1Data,  type="link")
flwrFig1Data$fit <- predict(bestfit, newdata =flwrFig1Data,  type="response")
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedAbundance, y=seedlings22))+
geom_point()+
geom_line(aes(y = fit) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seeds")+ylab("Seedlings")
abundanceSeedlings
predict(bestfit, newdata =flwrFig1Data,  type="link", se = T)
bestfit_predict <- predict(bestfit, newdata =flwrFig1Data,  type="link", se = T)
names(bestfit_predict)
flwrFig1Data$fit <- exp(bestfit_predict$fit)
flwrFig1Data$fit <- exp(bestfit_predict$fit)
flwrFig1Data$lci <- exp(bestfit_predict$fit - 1.96*bestfit_predict$se.fit)
flwrFig1Data$uci <- exp(bestfit_predict$fit + 1.96*bestfit_predict$se.fit)
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedAbundance, y=seedlings22))+
geom_point()+
geom_line(aes(y = fit) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seeds")+ylab("Seedlings")
abundanceSeedlings
?geom_ribbon
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedAbundance, y=seedlings22))+
geom_point()+
geom_line(aes(y = fit) )+
geom_ribbon(aes(ymin = lci, ymax = uci)) +
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seeds")+ylab("Seedlings")
abundanceSeedlings
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedAbundance, y=seedlings22))+
geom_point()+
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = .5) +
geom_line(aes(y = fit) )+
# geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seeds")+ylab("Seedlings")
abundanceSeedlings
summary(bestfit)
bestfitNo<- glm(seedlings22~seedAbundance, data = flwrFig1Data, family=poisson())
summary(bestfitNo)#comopare with or without polynomial, then do anova to choose
bestfit$data
bestfit$contrasts
model.matrix(bestfit)
-0.031672485  * -0.031672485
##making graph of seedlings vs seed abundance
bestfit<- glm(seedlings22~seedAbundance^2, data = flwrFig1Data, family=poisson())
model.matrix(bestfit)
bestfitAdded<- glm(seedlings22~poly(seedAbundance,2)+patchDistance+roadDistance, data = flwrFig1Data, family=poisson())
summary(bestfitAdded)#comopare with or without polynomial, then do anova to choose
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=patchDistance, y=seedlings22))+
geom_point()+
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = .5) +
geom_line(aes(y = fit) )+
##this is showing no significant relationship
ggsave("Seeds vs Plants", plot=abundanceAlive, path = "C:\\Users\\irisa\\Documents\\Archbold\\Intern Project", width = 8, height = 6, device='jpg', dpi=600)
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=patchDistance, y=seedlings22))+
geom_point()+
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = .5) +
geom_line(aes(y = fit) )+
##this is showing no significant relationship
ggsave("Seeds vs Plants", plot=abundanceAlive, path = "C:\\Users\\irisa\\Documents\\Archbold\\Intern Project", width = 8, height = 6, device='jpg', dpi=600)
abundanceSeedlings2 <- ggplot(flwrFig1Data, aes(x=patchDistance, y=seedlings22))+
geom_point()+
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = .5) +
geom_line(aes(y = fit) )
abundanceSeedlings2
bestfit_predict <- predict(bestfitAdded, newdata =flwrFig1Data,  type="link", se = T)
flwrFig1Data$fit <- exp(bestfit_predict$fit)
flwrFig1Data$lci <- exp(bestfit_predict$fit - 1.96*bestfit_predict$se.fit)
flwrFig1Data$uci <- exp(bestfit_predict$fit + 1.96*bestfit_predict$se.fit)
abundanceSeedlings2 <- ggplot(flwrFig1Data, aes(x=patchDistance, y=seedlings22))+
geom_point()+
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = .5) +
geom_line(aes(y = fit) )
abundanceSeedlings2
abundanceSeedlings2 <- ggplot(flwrFig1Data, aes(x=roadDistance, y=seedlings22))+
geom_point()+
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = .5) +
geom_line(aes(y = fit) )
abundanceSeedlings2
abundanceSeedlings2 <- ggplot(flwrFig1Data, aes(x=patchDistance, y=seedlings22))+
geom_point()+
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = .5) +
geom_line(aes(y = fit) )
abundanceSeedlings2
##comparing interior and exterior
# started 1/27/23
library(ggplot2)
library(tidyverse)
library(dplyr)
library(ggpubr) #for normality tests
library(lme4)
library(car)
library(MASS)
#1 load data rosemary: intData bald 1 roadside:roadData
# road: fig1Data
# interior: scrubData
fig1Data <- read.csv("C:\\Users\\irisa\\Documents\\Archbold\\Intern Project\\bald1RoadsideRaw.csv")
scrubData <- read_csv("C:\\Users\\irisa\\Documents\\Archbold\\Eryngium Manuscript\\rosemaryBaldsCombined.csv") #rosemary bald data
nrow(fig1Data)
#filtering out incorrect patch distance 130
fig1Data <- subset(fig1Data, patchDistance!=130)
nrow(fig1Data)
#check for normality, qqplot does correlation between data and normal line
ggqqplot(fig1Data$abundanceMass)
ggqqplot(scrubData$seedAbundance)
##both do not really show normal distribution
#Shapiro-Wilk normality test
shapiro.test(fig1Data$seedAbundance)
shapiro.test(fig1Data$abundanceMass)
shapiro.test(fig1Data$logAbundanceMass)
subset1 <- subset(fig1Data,logAbundanceMass!=-Inf )
shapiro.test(subset1$abundanceMass) #log transformed seed abundance is still not normally distributed
#create a unique id (uid) for each road record so that each record is a unique bag of sand which will be the random effect. Create another column because names have to be the same
fig1Data$uid <- paste(fig1Data$patchDistance, fig1Data$roadDistance, sep = "_")
fig1Data$site <- paste(fig1Data$patchDistance, fig1Data$roadDistance, sep = "_")
scrubData$site <- paste(scrubData$transectNum, scrubData$nearFar, sep = "_")#this serves as a unique id for every unique bag of sand for the scrub sites
test <- subset(fig1Data, patchDistance==130)
#add habitat column to add that as a predictor in model
fig1Data$habitat <- "road"
scrubData$habitat <- "scrub"
## gives small p value, shows that my data is sigificantly different than a normal distribution
##Visually show
#changing from using seed abundance to using abundance per mass
scrubMeanSeed <-mean(scrubData$abundanceMass)
roadMeanSeed <- mean(fig1Data$abundanceMass)
##values: scrub: .51316, road:3.2721
#creating & applying standard error function
standard_error <- function(x) sd(x)/sqrt(length(x))
seScrub <- standard_error(scrubData$abundanceMass)
seRoad <- standard_error(fig1Data$abundanceMass)
comparison<- data.frame(location=c("Scrub", "Road"), MeanSeeds=c(scrubMeanSeed, roadMeanSeed), standardError= c(seScrub, seRoad))
comparisonPlot <- ggplot(comparison, aes(x=location, y=MeanSeeds))+
geom_col()+
ggtitle("Mean Seed Abundance for Roadside and Scrub Interior")+xlab("Location")+ylab("Mean Seed Abundance/Mass (seed/gram) ")+
geom_errorbar(aes(ymin = MeanSeeds-standardError, ymax = MeanSeeds+standardError), data = comparison, width = 0.2)+
theme(text=element_text(size=16))
#running statistics, using a linear mixed effects model
# first select the columbs you need then combine data sets
scrubDataSubset <- scrubData%>%
select(abundanceMass, habitat, site, seedAbundance, massBag)
##do this if dplyr is masked
scrubDataSubset <- scrubData %>%
dplyr::select(abundanceMass, habitat, site, seedAbundance, massBag)
roadDataSubset <- fig1Data%>%
dplyr::select(abundanceMass, habitat, site, seedAbundance, massBag)
combinedData <- rbind(roadDataSubset, scrubDataSubset)
combinedData$habitat <- factor(combinedData$habitat)
## create the linear mixed effects model
##try as glmer
scrubRoadModel <- glmer(seedAbundance~habitat + (1|site), data=combinedData, family = poisson, offset = log(massBag))
summary(scrubRoadModel)
#trying as negative binomial
control_params <- glmerControl(optimizer = "bobyqa",
optCtrl = list(maxfun = 50000))
## BEST model, lower BIC than doing it with neg bin
modelPoisson<- glmer(seedAbundance~habitat +(1|site), data=combinedData, offset = log(massBag), family= poisson)
summary(modelPoisson)
##^this model above is good once you figure out the duplicate in road 130_4
boxplot(seedAbundance~as.factor(habitat) ,data=combinedData)
table(combinedData$habitat)
summary(modelPoisson)
glmeNegBinomial<- glmer.nb(seedAbundance~habitat + (1|site), data=combinedData, control = control_params)
model_nb <- glmer.nb(seedAbundance ~ habitat + (1 | site), data = combinedData, offset = log(massBag))
summary(model_nb)
#checking dispersion:
# Extract fitted values from the model
fitted_values <- fitted(model_nb)
# Calculate dispersion statistic (variance to mean ratio)
dispersion_stat <- var(dev_resid) / mean(fitted_values)
#goal: combine into one data frame  go for something like this:
##model <- lmer(abundanceMass ~ transect + distance_from_road + site + (1 | group), data = combinedData)
##exporting plot as jpg:
ggsave("road vs scrub", plot=comparisonPlot, path = "C:\\Users\\irisa\\Documents\\Archbold\\Intern Project", width = 8, height = 6, device='jpg', dpi=600)
# tiff("R:/Aaron David - restricted/USDA/other projects/ABS sequencing/landscape ms/Mycologia/mycologia revision/fig2-dbRDA-varpart.tif",width = 165, height = 56,units = "mm", pointsize = 9,res=600)
#
# #Make your figure
#
# dev.off()
# checking for over and under dispersion:
# Extract deviance residuals
fitted_values <- fitted(modelPoisson)
dev_resid <- residuals(modelPoisson, type = "deviance")
# Calculate dispersion statistic (variance to mean ratio)
dispersion_stat <- var(dev_resid) / mean(fitted_values)
# Compare dispersion statistic to expected value (1 for Poisson distribution)
if (dispersion_stat > 1) {
print("Model exhibits overdispersion")
} else if (dispersion_stat < 1) {
print("Model exhibits underdispersion")
} else {
print("Model has expected dispersion")
}
overdisp_fun(modelPoisson)
#testing pearson and deviance goodness of fit tests:
# Pearson's chi-square test for overdispersion
library(AER)
library(MASS)
pearson_test <- MASS::dispersiontest(modelPoisson, data = combinedData, type = "pearson")
print(pearson_test)
# Deviance goodness-of-fit test
deviance_test <- dispersiontest(modelPoisson, data = combinedData, type = "deviance")
print(deviance_test)
#trying a generalized poisson:
# Fit the generalized Poisson model with log-transformed seedAbundance
model_gpoisson <- vglm(log(seedAbundance) ~ habitat, family = genpoisson, data = combinedData, trace = TRUE, crit = "coef")
# Summary of the model
summary(model_gpoisson)
# running a t test to compare
t.test(scrubData$seedAbundance[scrubData$bald!="45"], fig1Data$seedAbundance)
## significant difference! note I excluded bald 45 and just looked at current populations in rosemary balds
#trying a generalized poisson:
# Fit the generalized Poisson model with log-transformed seedAbundance
model_gpoisson <- glm(log(seedAbundance) ~ habitat, family = genpoisson, data = combinedData, trace = TRUE, crit = "coef")
model_nb <- glmer.nb(seedAbundance ~ habitat + (1 | site), data = combinedData, offset = log(massBag))
summary(model_nb)
getwd
getwd()
library(tidyverse)
fig1Data <- read_csv("Raw Data\\bald1RoadsideRaw.csv")#this is the bald1data
#create a unique id (uid) for each road record so that each record is a unique bag of sand which will be the random effect. Create another column because names have to be the same
fig1Data$uid <- paste(fig1Data$patchDistance, fig1Data$roadDistance, sep = "_")
#create a unique id (uid) for each road record so that each record is a unique bag of sand which will be the random effect. Create another column because names have to be the same
fig1Data$uid <- paste(fig1Data$patchDistance, fig1Data$roadDistance, sep = "_")
#checking for duplicated unique ids which indicate an error
duplicates <- fig1Data$uid[duplicated(fig1Data$uid)]
duplicates
fig1Data <- fig1Data <- subset(fig1Data, patchDistance!=130)
#exporting the clean data:
write.csv(fig1Data, file = "cleanData\\roadData.csv", row.names = FALSE)
library(tidyverse)
library(dplyr) #NOTE- some dplyr functions may be masked, fix with dplyr::
library(car)
library(readxl)
demographyData <-read.csv("C:\\Users\\irisa\\Documents\\Archbold\\Intern Project\\ecABSdemog.csv")
demographyData <- demographyData[demographyData$bald==1,]
fig1Data <- read_csv("cleanData/roadData.csv")#this is the bald1data
#adds column of NAs for road dist, this is how we;re creating variables
demographyData$roadDistance <- NA
#cutoff variable allows you to set cutoffs around each of the road distances and "capture" those plants, can mess with the values
cutoff <- .25
demographyData$roadDistance <- NA
#dfine zones one at a time, 1s refer to my roadDistance 1 (1m), do 4 times change 1 to 2,3,4
demographyData$roadDistance[demographyData$y.cor>=(1-cutoff)&demographyData$y.cor<(1+cutoff)]<- 1
demographyData$roadDistance[demographyData$y.cor>=(2-cutoff)&demographyData$y.cor<(2+cutoff)]<- 2
demographyData$roadDistance[demographyData$y.cor>=(3-cutoff)&demographyData$y.cor<(3+cutoff)]<- 3
demographyData$roadDistance[demographyData$y.cor>=(4-cutoff)&demographyData$y.cor<(4+cutoff)]<- 4
#initialize the variable as full of NA values
demographyData$alive22 <- NA
# %in% tells to just look at these values (1,3,5) could do triple OR statement, I am only going to do this for 1,3 so it can be, basically %in% checks if something is equal to multiple things
demographyData$alive22[demographyData$s22 %in% c(1,3, 5)] <- 1 #assigns 1 to all living plants
#could make one for flowering,
demographyData$flwr21 <- NA
demographyData$flwr21<- demographyData$h22>=1 #this creates a column of TRUE FALSE
demographyData$seedlings22 <- NA
demographyData$seedlings22[demographyData$s22 %in% c(5)] <- 1
##mKING s22 seedling survival column
demographyData$seedlingSurvival22[!is.na(demographyData$s21)&demographyData$s21==5 & demographyData$s22==1]<- 1
demographyData$seedlingSurvival22[!is.na(demographyData$s21)&demographyData$s21==5 & demographyData$s22==0] <- 0
demographyData$seedlingSurvival21[!is.na(demographyData$s20)&demographyData$s20==5 & demographyData$s21==1]<- 1
demographyData$seedlingSurvival21[!is.na(demographyData$s20)&demographyData$s20==5 & demographyData$s21==0] <- 0
##2020
demographyData$seedlingSurvival20[!is.na(demographyData$s19)&demographyData$s19==5 & demographyData$s20==1]<- 1
demographyData$seedlingSurvival20[!is.na(demographyData$s19)&demographyData$s21==5 & demographyData$s20==0] <- 0
##rowSums
##need it to id rows with all NAs and skip over those rows, we don't want NAs, could make a column and mark with 1s or 0s (tellw which colum to run on)
demographyData$seedlingSurvival20to22 <- NA
demographyData$seedlingSurvival20to22 <- rowSums(demographyData[,c("seedlingSurvival20","seedlingSurvival21", "seedlingSurvival22")][!is.na(demographyData$seedlingSurvival20) | !is.na(demographyData$seedlingSurvival21) | !is.na(demographyData$seedlingSurvival22)], na.rm=TRUE)
temp <- aggregate(list(alive22=demographyData$alive22, seedlings22=demographyData$seedlings22, heads21=demographyData$h21), list(patchDistance=demographyData$patch, roadDistance=demographyData$roadDistance), sum, na.rm=TRUE)
demographyData$seedlingSurvival20to22 <- rowSums(demographyData[,c("seedlingSurvival20","seedlingSurvival21", "seedlingSurvival22")][!is.na(demographyData$seedlingSurvival20) | !is.na(demographyData$seedlingSurvival21) | !is.na(demographyData$seedlingSurvival22)], na.rm=TRUE)
temp <- aggregate(list(alive22=demographyData$alive22, seedlings22=demographyData$seedlings22, heads21=demographyData$h21), list(patchDistance=demographyData$patch, roadDistance=demographyData$roadDistance), sum, na.rm=TRUE)
##merges in mean seedling survival, temp3 is mean
temp3 <- aggregate(list(seedlingSurvival22=demographyData$seedlingSurvival22), list(patchDistance=demographyData$patch, roadDistance=demographyData$roadDistance), mean, na.rm=TRUE)
##merge temp and temp3
temp4 <-merge(temp, temp3, by=c("patchDistance", "roadDistance"), all.x = TRUE, all.y = FALSE)
temp2 <- merge(fig1Data, temp4, by=c("patchDistance", "roadDistance"), all.x = TRUE, all.y = FALSE)
#SKIP HERE TO MAKE THE HEADS VS SEED ABUNDANCE FIGURE
flwrFig1Data <-merge(fig1Data, temp, by=c("patchDistance", "roadDistance"), all.x = TRUE, all.y = FALSE) #merges fig1 data and temp which has eryngium demography data including flowring heads, should I remove NAs in flowering heads?
#chanigng NA to zero, ##opposite of is.na is !is.na()
temp2$alive22[is.na(temp2$alive)]<-0
##^tells that anything that is an NA value gets a zero
temp2$seedlings22[is.na(temp2$seedlings22)] <-0
library(ggplot2)
#this graph is for seed abundance vs number flowering heads
bestfit<- lm(flwrFig1Data$seedAbundance~flwrFig1Data$heads21)
flwrAbundance <- ggplot(flwrFig1Data, aes(x=flwrFig1Data$heads21, y=flwrFig1Data$seedAbundance))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Flowering Heads 2021")+xlab("Number of Flowering Heads")+ylab("Seed Abundance")
##doing this for all alive plants
bestfitAlive<- lm(temp2$seedAbundance~temp2$alive22)
abundanceAlive <- ggplot(temp2, aes(x=alive22, y=seedAbundance))+
geom_point()+
geom_smooth(method = "lm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Plants")+xlab("Number of Plants")+ylab("Seed Abundance")
##making graph of seedlings vs seed abundance
#poly(seedAbundance,2) helps get rid of colinearity issue
bestfit<- glm(seedlings22~poly(seedAbundance,2), data = flwrFig1Data, family=poisson())
bestfitNo<- glm(seedlings22~seedAbundance, data = flwrFig1Data, family=poisson())
bestfitAdded<- glm(seedlings22~poly(seedAbundance,2)+patchDistance+roadDistance, data = flwrFig1Data, family=poisson())
summary(bestfitAdded)#comopare with or without polynomial, then do anova to choose
#this creates the confidence intervals
bestfit_predict <- predict(bestfit, newdata =flwrFig1Data,  type="link", se = T)
bestfit_predict <- predict(bestfitAdded, newdata =flwrFig1Data,  type="link", se = T)
flwrFig1Data$fit <- exp(bestfit_predict$fit)
flwrFig1Data$lci <- exp(bestfit_predict$fit - 1.96*bestfit_predict$se.fit)
flwrFig1Data$uci <- exp(bestfit_predict$fit + 1.96*bestfit_predict$se.fit)
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x=seedAbundance, y=seedlings22))+
geom_point()+
# geom_ribbon(aes(ymin = lci, ymax = uci), alpha = .5) +
geom_line(aes(y = fit) )+
geom_smooth(method = "glm", se=FALSE, color="black", formula = y ~ x) +
ggtitle("Seed Abundance vs Number of Seedlings in 2022")+xlab("Number of Seeds")+ylab("Seedlings")
abundanceSeedlings
#USE THIS: making test predicted data:
## Fit the models
bestfit <- glm(seedlings22 ~ poly(seedAbundance, 2), data = flwrFig1Data, family = poisson())
bestfitAdded <- glmer(seedlings22 ~ poly(seedAbundance, 2) + patchDistance + (1|patchDistance) +roadDistance, data = flwrFig1Data, family = poisson())
library(lme4)
#USE THIS: making test predicted data:
## Fit the models
bestfit <- glm(seedlings22 ~ poly(seedAbundance, 2), data = flwrFig1Data, family = poisson())
bestfitAdded <- glmer(seedlings22 ~ poly(seedAbundance, 2) + patchDistance + (1|patchDistance) +roadDistance, data = flwrFig1Data, family = poisson())
summary(bestfitAdded)
## Predict fitted values and confidence intervals
flwrFig1Data$fit <- exp(predict(bestfit, newdata = flwrFig1Data, type = "link"))
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
#
newDF <- expand.grid(patchDistance=seq(0,180,5), roadDistance=1:4, seedAbundance=seq(0,30,1))#makes all combo
newDF$fit <- predict(bestfitAdded, newdata=newDF,re.form=~0)#this tells it to ignore random effect in predictions
reducedModel <- glmer(seedlings22 ~ (1|patchDistance) +roadDistance, data = flwrFig1Data, family = poisson())
newDF <- expand.grid( roadDistance=seq(1,4, .01))
newDF$fit <- predict(reducedModel, newdata=newDF,re.form=~0)
## Create the plot, THIS ONE WORKS- LOOKS BEST WITHOUT ADDITIVE, maybe just use this for visualizing but for the actual stats include the added patchDistance etc terms bc lower AIC
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x = seedAbundance, y = seedlings22)) +
geom_point() +
# geom_smooth(method = "glm", se = FALSE, color = "black", formula = y ~ x) +
geom_line(aes(y = fit), color = "blue") +  # Fitted values from bestfit
geom_line(aes(y = fitAdded), color = "red") +  # Fitted values from bestfitAdded
geom_line(aes(y=newDF$fit)) #fix this
## Create the plot, THIS ONE WORKS- LOOKS BEST WITHOUT ADDITIVE, maybe just use this for visualizing but for the actual stats include the added patchDistance etc terms bc lower AIC
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x = seedAbundance, y = seedlings22)) +
geom_point() +
# geom_smooth(method = "glm", se = FALSE, color = "black", formula = y ~ x) +
geom_line(aes(y = fit), color = "blue") +  # Fitted values from bestfit
geom_line(aes(y = fitAdded), color = "red") +  # Fitted values from bestfitAdded
#geom_line(aes(y=newDF$fit)) #fix this
ggtitle("Seed Abundance vs Number of Seedlings in 2022") +
xlab("Number of Seeds") + ylab("Seedlings")
abundanceSeedlings
## Predict fitted values and confidence intervals
flwrFig1Data$fit <- exp(predict(bestfit, newdata = flwrFig1Data, type = "link"))
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
## Create the plot, THIS ONE WORKS- LOOKS BEST WITHOUT ADDITIVE, maybe just use this for visualizing but for the actual stats include the added patchDistance etc terms bc lower AIC
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x = seedAbundance, y = seedlings22)) +
geom_point() +
# geom_smooth(method = "glm", se = FALSE, color = "black", formula = y ~ x) +
geom_line(aes(y = fit), color = "blue") +  # Fitted values from bestfit
geom_line(aes(y = fitAdded), color = "red") +  # Fitted values from bestfitAdded
#geom_line(aes(y=newDF$fit)) #fix this
ggtitle("Seed Abundance vs Number of Seedlings in 2022") +
xlab("Number of Seeds") + ylab("Seedlings")
abundanceSeedlings
## Create the plot, THIS ONE WORKS- LOOKS BEST WITHOUT ADDITIVE, maybe just use this for visualizing but for the actual stats include the added patchDistance etc terms bc lower AIC
abundanceSeedlings <- ggplot(flwrFig1Data, aes(x = seedAbundance, y = seedlings22)) +
geom_point() +
# geom_smooth(method = "glm", se = FALSE, color = "black", formula = y ~ x) +
geom_line(aes(y = fit), color = "blue") +  # Fitted values from bestfit
#geom_line(aes(y = fitAdded), color = "red") +  # Fitted values from bestfitAdded
#geom_line(aes(y=newDF$fit)) #fix this
ggtitle("Seed Abundance vs Number of Seedlings in 2022") +
xlab("Number of Seeds") + ylab("Seedlings")
abundanceSeedlings
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
bestfitAdded <- glmer(seedlings22 ~ poly(seedAbundance, 2) + patchDistance + (1|patchDistance) +roadDistance, data = flwrFig1Data, family = poisson())
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
?dir.create()
getwd
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
abundanceSeedlings
bestfitAdded <- glmer(seedlings22 ~ poly(seedAbundance, 2) + patchDistance + (1|patchDistance) +roadDistance, data = flwrFig1Data, family = poisson())
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
str(flwrFig1Data)
bestfitAdded <- glm(seedlings22 ~ poly(seedAbundance, 2) + as.factor(patchDistance)  +roadDistance, data = flwrFig1Data, family = poisson())
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
unique(flwrFig1Data$patchDistance)
summary(flwrFig1Data)
unique(flwrFig1Data$patchDistance)
newDF$fit <- predict(bestfitAdded, newdata=newDF,re.form=~0)#this tells it to ignore random effect in predictions
newDF$fit <- predict(bestfitAdded, newdata=newDF,re.form=~0)#this tells it to ignore random effect in predictions
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
#
newDF <- expand.grid(patchDistance=seq(0,180,5), roadDistance=1:4, seedAbundance=seq(0,30,1))#makes all combo
newDF$fit <- predict(bestfitAdded, newdata=newDF,re.form=~0)#this tells it to ignore random effect in predictions
model.matrix(bestfitAdded)
table(flwrFig1Data$patchDistance)
table(flwrFig1Data$patchDistance, flwrFig1Data$roadDistance)
bestfitAdded <- glm(seedlings22 ~ poly(seedAbundance, 2) + (patchDistance)  +roadDistance, data = flwrFig1Data, family = poisson())
summary(bestfitAdded)
## Predict fitted values and confidence intervals
flwrFig1Data$fit <- exp(predict(bestfit, newdata = flwrFig1Data, type = "link"))
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
bestfitAdded <- glm(seedlings22 ~ poly(seedAbundance, 2) + as.factor(patchDistance)  +roadDistance, data = flwrFig1Data, family = poisson())
flwrFig1Data$patchDistanceF <- as.factor(flwrFig1Data$patchDistance)
bestfitAdded <- glm(seedlings22 ~ poly(seedAbundance, 2) + patchDistance +roadDistance, data = flwrFig1Data, family = poisson())
summary(bestfitAdded)
## Predict fitted values and confidence intervals
flwrFig1Data$fit <- exp(predict(bestfit, newdata = flwrFig1Data, type = "link"))
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
bestfitAdded <- glm(seedlings22 ~ poly(seedAbundance, 2) + patchDistanceF +roadDistance, data = flwrFig1Data, family = poisson())
summary(bestfitAdded)
## Predict fitted values and confidence intervals
flwrFig1Data$fit <- exp(predict(bestfit, newdata = flwrFig1Data, type = "link"))
flwrFig1Data$fitAdded <- exp(predict(bestfitAdded, newdata = flwrFig1Data, type = "link"))
unique(flwrFig1Data$patchDistanceF)
unique(flwrFig1Data$patchDistanceF)
View(flwrFig1Data)
